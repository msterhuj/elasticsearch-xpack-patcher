--- tmp/8.14.3-decompiled/LicenseVerifier.original.java
+++ tmp/8.14.3-decompiled/LicenseVerifier.pached.java
@@ -3,66 +3,18 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.ByteBuffer;
 import java.security.PublicKey;
-import java.security.Signature;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collections;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.BytesRefIterator;
-import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.hash.MessageDigests;
 import org.elasticsearch.core.Streams;
-import org.elasticsearch.core.Strings;
-import org.elasticsearch.xcontent.ToXContent;
-import org.elasticsearch.xcontent.XContentBuilder;
-import org.elasticsearch.xcontent.XContentFactory;
-import org.elasticsearch.xcontent.XContentType;
 
 public class LicenseVerifier {
-  private static final Logger logger = LogManager.getLogger(LicenseVerifier.class);
-  
+
   private static final PublicKey PUBLIC_KEY;
-  
+
   private static final String PUBLIC_KEY_DIGEST_HEX_STRING;
-  
+
   public static boolean verifyLicense(License license, PublicKey publicKey) {
-    byte[] signedContent = null;
-    byte[] publicKeyFingerprint = null;
-    try {
-      byte[] signatureBytes = Base64.getDecoder().decode(license.signature());
-      ByteBuffer byteBuffer = ByteBuffer.wrap(signatureBytes);
-      int version = byteBuffer.getInt();
-      int magicLen = byteBuffer.getInt();
-      byte[] magic = new byte[magicLen];
-      byteBuffer.get(magic);
-      int hashLen = byteBuffer.getInt();
-      publicKeyFingerprint = new byte[hashLen];
-      byteBuffer.get(publicKeyFingerprint);
-      int signedContentLen = byteBuffer.getInt();
-      signedContent = new byte[signedContentLen];
-      byteBuffer.get(signedContent);
-      XContentBuilder contentBuilder = XContentFactory.contentBuilder(XContentType.JSON);
-      license.toXContent(contentBuilder, (ToXContent.Params)new ToXContent.MapParams(Collections.singletonMap("license_spec_view", "true")));
-      Signature rsa = Signature.getInstance("SHA512withRSA");
-      rsa.initVerify(publicKey);
-      BytesRefIterator iterator = BytesReference.bytes(contentBuilder).iterator();
-      BytesRef ref;
-      while ((ref = iterator.next()) != null)
-        rsa.update(ref.bytes, ref.offset, ref.length); 
-      boolean verifyResult = rsa.verify(signedContent);
-      if (!verifyResult)
-        logger.warn(() -> Strings.format("License with uid [%s] failed signature verification with the public key with sha256 [%s].", new Object[] { license.uid(), PUBLIC_KEY_DIGEST_HEX_STRING })); 
-      return verifyResult;
-    } catch (IOException|java.security.NoSuchAlgorithmException|java.security.SignatureException|java.security.InvalidKeyException e) {
-      throw new IllegalStateException(e);
-    } finally {
-      if (signedContent != null)
-        Arrays.fill(signedContent, (byte)0); 
-    } 
+    return true;
   }
   
   static {
@@ -91,7 +43,7 @@
   }
   
   public static boolean verifyLicense(License license) {
-    return verifyLicense(license, PUBLIC_KEY);
+    return true;
   }
 }
 
