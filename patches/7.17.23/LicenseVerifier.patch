--- tmp/7.17.23-decompiled/LicenseVerifier.original.java
+++ tmp/7.17.23-decompiled/LicenseVerifier.patched.java
@@ -1,79 +1,12 @@
 package org.elasticsearch.license;
 
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.ByteBuffer;
-import java.security.Signature;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collections;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.BytesRefIterator;
-import org.elasticsearch.common.bytes.BytesReference;
-import org.elasticsearch.core.internal.io.Streams;
-import org.elasticsearch.xcontent.ToXContent;
-import org.elasticsearch.xcontent.XContentBuilder;
-import org.elasticsearch.xcontent.XContentFactory;
-import org.elasticsearch.xcontent.XContentType;
-
 public class LicenseVerifier {
   public static boolean verifyLicense(License license, byte[] publicKeyData) {
-    byte[] signedContent = null;
-    byte[] publicKeyFingerprint = null;
-    try {
-      byte[] signatureBytes = Base64.getDecoder().decode(license.signature());
-      ByteBuffer byteBuffer = ByteBuffer.wrap(signatureBytes);
-      int version = byteBuffer.getInt();
-      int magicLen = byteBuffer.getInt();
-      byte[] magic = new byte[magicLen];
-      byteBuffer.get(magic);
-      int hashLen = byteBuffer.getInt();
-      publicKeyFingerprint = new byte[hashLen];
-      byteBuffer.get(publicKeyFingerprint);
-      int signedContentLen = byteBuffer.getInt();
-      signedContent = new byte[signedContentLen];
-      byteBuffer.get(signedContent);
-      XContentBuilder contentBuilder = XContentFactory.contentBuilder(XContentType.JSON);
-      license.toXContent(contentBuilder, (ToXContent.Params)new ToXContent.MapParams(Collections.singletonMap("license_spec_view", "true")));
-      Signature rsa = Signature.getInstance("SHA512withRSA");
-      rsa.initVerify(CryptUtils.readPublicKey(publicKeyData));
-      BytesRefIterator iterator = BytesReference.bytes(contentBuilder).iterator();
-      BytesRef ref;
-      while ((ref = iterator.next()) != null)
-        rsa.update(ref.bytes, ref.offset, ref.length); 
-      return rsa.verify(signedContent);
-    } catch (IOException|java.security.NoSuchAlgorithmException|java.security.SignatureException|java.security.InvalidKeyException e) {
-      throw new IllegalStateException(e);
-    } finally {
-      if (signedContent != null)
-        Arrays.fill(signedContent, (byte)0); 
-    } 
+    return true;
   }
   
   public static boolean verifyLicense(License license) {
-    byte[] publicKeyBytes;
-    try {
-      InputStream is = LicenseVerifier.class.getResourceAsStream("/public.key");
-      try {
-        ByteArrayOutputStream out = new ByteArrayOutputStream();
-        Streams.copy(is, out);
-        publicKeyBytes = out.toByteArray();
-        if (is != null)
-          is.close(); 
-      } catch (Throwable throwable) {
-        if (is != null)
-          try {
-            is.close();
-          } catch (Throwable throwable1) {
-            throwable.addSuppressed(throwable1);
-          }  
-        throw throwable;
-      } 
-    } catch (IOException ex) {
-      throw new IllegalStateException(ex);
-    } 
-    return verifyLicense(license, publicKeyBytes);
+    return true;
   }
 }
 
